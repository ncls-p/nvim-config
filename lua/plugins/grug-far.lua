return {
  {
    "MagicDuck/grug-far.nvim",
    cmd = "GrugFar",
    keys = {
      { "<leader>sr", "<cmd>GrugFar<cr>", desc = "Search and Replace" },
      { "<leader>sR", function() require("grug-far").grug_far({ prefills = { search = vim.fn.expand("<cword>") } }) end, desc = "Search and Replace (current word)" },
      { "<leader>sf", function() require("grug-far").grug_far({ prefills = { paths = vim.fn.expand("%") } }) end, desc = "Search and Replace (current file)" },
      { "<leader>sF", function() require("grug-far").grug_far({ prefills = { search = vim.fn.expand("<cword>"), paths = vim.fn.expand("%") } }) end, desc = "Search and Replace (current word in current file)" },
    },
    opts = {
      headerMaxWidth = 80,
      transient = false,
      windowCreationCommand = "tabnew %",
      keymaps = {
        replace = { n = "<leader>r" },
        qflist = { n = "<leader>q" },
        syncLocations = { n = "<leader>s" },
        syncLine = { n = "<leader>l" },
        close = { n = "<leader>c" },
        historyOpen = { n = "<leader>t" },
        historyAdd = { n = "<leader>a" },
        refresh = { n = "<leader>f" },
        openLocation = { n = "<leader>o" },
        openNextLocation = { n = "<down>" },
        openPrevLocation = { n = "<up>" },
        gotoLocation = { n = "<enter>" },
        pickHistoryEntry = { n = "<enter>" },
        abort = { n = "<leader>b" },
        help = { n = "g?" },
        toggleShowCommand = { n = "<leader>p" },
        swapEngine = { n = "<leader>e" },
      },
      engines = {
        ripgrep = {
          path = "rg",
          extraArgs = "",
          showReplaceDiff = true,
          placeholders = {
            enabled = true,
            search = "ex: foo    foo([a-z0-9]*)    fun\\(",
            replacement = "ex: bar    ${1}_foo    $$MY_ENV_VAR",
            replacement_lua = "ex: return \"bar\"    return string.gsub([[${match}]], \"old\", \"new\")",
            filesFilter = "ex: *.lua    *.{css,js}    **/docs/*.md",
            flags = "ex: --help --ignore-case (-i) --word-regexp (-w) --multiline (-U)",
            paths = "ex: /foo/bar    ../    ./hello\\ world/    ./src/foo.lua",
          },
        },
        astgrep = {
          path = "sg",
          extraArgs = "",
          showReplaceDiff = true,
          placeholders = {
            enabled = true,
            search = "ex: $A && $A()    useState<$T>($$$ARGS)",
            replacement = "ex: $A?.()    useState<$T | null>($$$ARGS)",
            filesFilter = "ex: *.lua    *.{css,js}    **/docs/*.md",
            flags = "ex: --help --debug --update-all (-U)",
            paths = "ex: /foo/bar    ../    ./hello\\ world/    ./src/foo.lua",
          },
        },
        patcher = {
          path = "patch",
          extraArgs = "",
          showReplaceDiff = false,
          placeholders = {
            enabled = false,
          },
        },
      },
      folding = {
        enabled = true,
        folds = {
          {
            line = "^========== .* ==========$",
            endLine = "^$",
            priority = 1,
          },
          {
            line = "^## ",
            endLine = "^$",
            priority = 2,
          },
        },
      },
      resultLocation = {
        showNumberLabel = true,
      },
      history = {
        maxHistorySize = 25,
        historyDir = vim.fn.stdpath("state") .. "/grug-far",
        save = true,
        autoLoad = {
          maxDirDepth = 3,
        },
      },
      staticTitle = "Search and Replace",
      searchOnInsertLeave = false,
      normalModeSearch = true,
      startInInsertMode = true,
      wrapText = true,
      wrap = true,
      icons = {
        enabled = true,
        actionEntryBullet = " ",
        searchInput = "  ",
        replaceInput = "  ",
        filesFilterInput = "  ",
        flagsInput = "  ",
        pathsInput = "  ",
        resultsStatusReady = "  ",
        resultsStatusError = "  ",
        resultsStatusSuccess = "  ",
        resultsActionMessage = "  ",
        resultsChangeIndicator = " ",
        resultsAddedIndicator = " ",
        resultsRemovedIndicator = " ",
        resultsHistoryIndicator = " ",
        spinnerFrames = { "⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏" },
      },
      spinnerMs = 175,
      maxSearchChars = 50,
      maxReplaceChars = 50,
      startCursorRow = 4,
      helpWinMaxHeight = 40,
      helpWinIsPopup = true,
      helpWinLocation = {
        row = 2,
        col = 2,
      },
      shortcuts = {
        help = {
          icon = "?",
          desc = "Help",
        },
        resultsTab = {
          icon = "R",
          desc = "Results",
        },
        historyTab = {
          icon = "H",
          desc = "History",
        },
      },
      debounceMs = 500,
      minSearchChars = 2,
      normalizedDelimiter = ",,",
      normalModeSearchPrefillVisualSelection = true,
      reportDuration = true,
      prefillSearch = true,
      disableBufferLineNumbers = true,
      maxWorkers = nil,
      rgPath = nil,
      startInNormalMode = false,
      searchOnInsertChange = true,
      incrementalPreview = true,
      maxPreviewLineLength = 999,
      clearSearchOnInsertModeEnter = false,
      headerMaxWidth = 80,
      resultsSeparatorLineChar = "─",
      spinnerStates = {
        "Searching...",
        "Replacing...",
        "Finalizing...",
        "Complete",
      },
    },
    config = function(_, opts)
      require("grug-far").setup(opts)
    end,
  },
}